<?php

/**
 * @file
 * Function to support theming in Zero sub-themes.
 */

use Drupal\Core\Template\Attribute;
use Drupal\svg_sprite\Entity\SvgSprite;

/**
 * Preprocess variables for html templates.
 */
function zero_preprocess_html(&$variables) {

  $current_path = \Drupal::service('path.current')->getPath();
  $current_path = substr($current_path, 1);
  $exploded_path = explode('/', $current_path);
  $css_class = 'path';

  foreach ($exploded_path as $path) {
    $css_class .= '-' . $path;
    $variables['attributes']['class'][] = $css_class;
  }

  // If fixed_navigation add the relative library.
  if (theme_get_setting('fixed_navbar')) {
    $variables['#attached']['library'][] = 'zero/fixed-navbar';
  }
}

/**
 * Preprocess variables for page templates.
 */
function zero_preprocess_page(&$variables) {

  $regions = array(
    'main',
    'sidebar_first',
    'sidebar_second'
  );

  $variables['row']['main']['attributes'] = new Attribute(
    array(
      'class' => active_regions_css_class($regions)
    )
  );

  $variables['container']['attributes'] = new Attribute(
    array(
      'class' => array(
        'container',
        'clearfix',
      )
    )
  );

  $variables['adaptive_navbar'] = theme_get_setting('enable_adaptive_navbar');

  if ($variables['adaptive_navbar']) {

    // Attach the library.
    $variables['#attached']['library'][] = 'droppy/droppy';
    $variables['#attached']['library'][] = 'zero/adaptive-navbar';

    $variables['trigger']['label'] = theme_get_setting('navbar_button_label');
  }

  $variables['use_svg_icon'] = theme_get_setting('navbar_button_svg_sprite');

  if ($variables['use_svg_icon']) {

    $config = theme_get_setting('navbar_button_svg_sprite');
    /** @var \Drupal\svg_sprite\Entity\SvgSprite $entity */
    $entity = SvgSprite::load($config);

    // If the entity is not an instance of SvgIcon, set use_svg_icon to false and return.
    if (!$entity instanceof SvgSprite) {
      $variables['use_svg_icon'] = FALSE;
      return;
    }

    $variables['trigger']['icon'] = array(
      '#type' => 'svg_icon_text',
      '#label' => theme_get_setting('navbar_button_label'),
      '#svg_sprite' => $entity->getSvgSprite(),
      '#icon_id' => theme_get_setting('navbar_button_icon_id'),
      '#icon_right' => theme_get_setting('navbar_button_icon_right'),
      '#hide_label' => theme_get_setting('navbar_button_hide_label')
    );
  }

  $variables['page']['#cache']['contexts'][] = 'route';

  if (\Drupal::routeMatch()->getRouteName() === 'entity.node.preview') {
    $variables['#attached']['library'][] = 'zero/node-preview';
  }
}

/**
 * Gets an array of region keys, check if those regions are active and returns
 * an array of CSS class that lists which regions are active.
 *
 * E.g. in the .row-main there are main, sidebar_first and sidebar_second
 * regions. If all regions are active the function will return
 * .has-regions--1-2-3 and .active-regions--3. If only main and sidebar_second
 * are active the function will return .has-regions--1-3 and .active-regions--2.
 *
 * @param array $regions
 * @return array
 */
function active_regions_css_class($regions) {

  $has_regions = 'has-regions-';
  $has_regions_counter = 0;
  $active_regions_counter = 0;

  foreach ($regions as $region) {

    $has_regions_counter++;

    if(!empty($variables['page'][$region])) {
      $has_regions .= ('-' . $has_regions_counter);
      $active_regions_counter++;
    }
  }

  return array(
    $has_regions,
    'active-regions--' . $active_regions_counter
  );
}
